# # -*- coding: utf-8 -*-
# """“cnn.ipynb”的副本
#
# Automatically generated by Colaboratory.
#
# Original file is located at
#     https://colab.research.google.com/drive/1MVAcsgNwgivYRzHQCZQ8HPVhI3MWttPr
#
# ##### Copyright 2019 The TensorFlow Authors.
# """
#
# #@title Licensed under the Apache License, Version 2.0 (the "License");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #
# # https://www.apache.org/licenses/LICENSE-2.0
# #
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.
#
# """# Convolutional Neural Network (CNN)
#
# <table class="tfo-notebook-buttons" align="left">
#   <td>
#     <a target="_blank" href="https://www.tensorflow.org/tutorials/images/cnn">
#     <img src="https://www.tensorflow.org/images/tf_logo_32px.png" />
#     View on TensorFlow.org</a>
#   </td>
#   <td>
#     <a target="_blank" href="https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/images/cnn.ipynb">
#     <img src="https://www.tensorflow.org/images/colab_logo_32px.png" />
#     Run in Google Colab</a>
#   </td>
#   <td>
#     <a target="_blank" href="https://github.com/tensorflow/docs/blob/master/site/en/tutorials/images/cnn.ipynb">
#     <img src="https://www.tensorflow.org/images/GitHub-Mark-32px.png" />
#     View source on GitHub</a>
#   </td>
#   <td>
#     <a href="https://storage.googleapis.com/tensorflow_docs/docs/site/en/tutorials/images/cnn.ipynb"><img src="https://www.tensorflow.org/images/download_logo_32px.png" />Download notebook</a>
#   </td>
# </table>
#
# This tutorial demonstrates training a simple [Convolutional Neural Network](https://developers.google.com/machine-learning/glossary/#convolutional_neural_network) (CNN) to classify [CIFAR images](https://www.cs.toronto.edu/~kriz/cifar.html). Because this tutorial uses the [Keras Sequential API](https://www.tensorflow.org/guide/keras/overview), creating and training our model will take just a few lines of code.
#
# ### Import TensorFlow
# """

#%%
# Commented out IPython magic to ensure Python compatibility.
from __future__ import absolute_import, division, print_function, unicode_literals

# Import explainer and callback

from tf_explain.core.grad_cam import GradCAM

from tf_explain.callbacks.grad_cam import GradCAMCallback

# try:
#   # %tensorflow_version only exists in Colab.
# #   %tensorflow_version 2.x
# except Exception:
#   pass

import tensorflow as tf
keras = tf.keras

# from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import hdf5storage as hdf5storage
import numpy as np


#%%
file_name = 'dataset_10017_reshaped.mat'
data_raw = hdf5storage.loadmat(file_name)
images = data_raw['img']
images = images[:, :, :, 0]
images = np.expand_dims(images, axis=-1)
labels = data_raw['label']
print(labels.dtype)
labels = labels.astype('uint8')
labels = labels - 1
print(labels.dtype)

# randomization
randseed = 1
np.random.seed(randseed)
images_number = images.shape[0]
ind_randomized = np.random.permutation(images_number)
images = images[ind_randomized]
labels = labels[ind_randomized]

ratio_train = 0.5
ind_cutoff = np.ceil(images_number * ratio_train).astype("int")

images_train = images[0:ind_cutoff]
labels_train = labels[0:ind_cutoff]
images_vali = images[ind_cutoff:]
labels_vali = labels[ind_cutoff:]


# verify the images and labels are correct
plt.figure(figsize=(10,10))
for m in range(9):
    plt.subplot(3, 3, m + 1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(images_train[m, :, :, 0], cmap='gray')
    plt.xlabel('%d' % labels_train[m])
plt.show()

plt.figure(figsize=(10,10))
for m in range(9):
    plt.subplot(3, 3, m + 1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(images_vali[m, :, :, 0], cmap='gray')
    plt.xlabel('%d' % labels_vali[m])
plt.show()

#%%

"""### Create the convolutional base

The 6 lines of code below define the convolutional base using a common pattern: a stack of [Conv2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D) and [MaxPooling2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/MaxPool2D) layers.

As input, a CNN takes tensors of shape (image_height, image_width, color_channels), ignoring the batch size. If you are new to these dimensions, color_channels refers to (R,G,B). In this example, you will configure our CNN to process inputs of shape (32, 32, 3), which is the format of CIFAR images. You can do this by passing the argument `input_shape` to our first layer.
"""

model = keras.models.Sequential()
model.add(keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(100, 100, 1), name='conv1'))
model.add(keras.layers.MaxPooling2D((2, 2), name='maxpool1'))
model.add(keras.layers.Conv2D(64, (3, 3), activation='relu', name='conv2'))
model.add(keras.layers.MaxPooling2D((2, 2), name='maxpool2'))
model.add(keras.layers.Conv2D(64, (3, 3), activation='relu', name='conv3'))

"""Let's display the architecture of our model so far."""

model.summary()

"""Above, you can see that the output of every Conv2D and MaxPooling2D layer is a 3D tensor of shape (height, width, channels). The width and height dimensions tend to shrink as you go deeper in the network. The number of output channels for each Conv2D layer is controlled by the first argument (e.g., 32 or 64). Typically,  as the width and height shrink, you can afford (computationally) to add more output channels in each Conv2D layer.

### Add Dense layers on top
To complete our model, you will feed the last output tensor from the convolutional base (of shape (3, 3, 64)) into one or more Dense layers to perform classification. Dense layers take vectors as input (which are 1D), while the current output is a 3D tensor. First, you will flatten (or unroll) the 3D output to 1D,  then add one or more Dense layers on top. CIFAR has 10 output classes, so you use a final Dense layer with 10 outputs and a softmax activation.
"""

model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(64, activation='relu'))
model.add(keras.layers.Dense(7, activation='softmax'))

"""Here's the complete architecture of our model."""

model.summary()

# callbacks = [
#     GradCAMCallback(
#         validation_data=(test_images, test_labels),
#         layer_name="activation_1",
#         class_index=0,
#         output_dir=output_dir,
#     )
# ]

"""As you can see, our (3, 3, 64) outputs were flattened into vectors of shape (576) before going through two Dense layers.

### Compile and train the model
"""

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(images_train, labels_train, epochs=5,
                    validation_data=(images_vali, labels_vali))  # , callbacks=callbacks

"""### Evaluate the model"""

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(images_vali,  labels_vali, verbose=2)

print(test_acc)

"""Our simple CNN has achieved a test accuracy of over 70%. Not bad for a few lines of code! For another CNN style, 
see an example using the Keras subclassing API and a `tf.GradientTape` 
[here](https://www.tensorflow.org/tutorials/quickstart/advanced)."""


#%%
# Instantiation of the explainer
explainer = GradCAM()

for class_index in range(7):
    ind_in_images_vali = np.where(labels_vali == class_index)[0]

    img_explain = images_vali[ind_in_images_vali[0:25], :, :, :]
    # print(img_single.size)

    data = (img_explain, None)

    # Save output
    output_dir = '.'
    output_name = 'grad_cam_class_%d.png' % class_index

    output = explainer.explain(data, model, "conv3", class_index)
    explainer.save(output, output_dir, output_name)


